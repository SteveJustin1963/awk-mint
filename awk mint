// Constants for tracking fields and counters
0 a!               // Initialize COL1-SUM to 0 (analogous to column sum)
0 b!               // Initialize NUM-FIELDS (for counting fields)

// Split input string into fields (assume space-delimited by default)
: SPLIT            // Function to split a string into fields
    0 b!           // Initialize number of fields (NUM-FIELDS = 0)
    (  b 1 + b!    // Increment field count (NUM-FIELDS++)
       `/` 48 -    // Reading input character (simulation)
       "           // Push the character into the stack (simulate a field)
    ) ;

// Print specific columns (1 and 3)
: PRINT-COLUMNS    
    b .            // Print number of fields
    a 1 = ( `Column 1: ` a . ) /E   // If 1st column, print it
    a 3 = ( `Column 3: ` a . ) /E   // If 3rd column, print it
;

// Sum values in column 2
: SUM-COLUMN-2     
    a 2 = ( a + a! )                // If it's column 2, add to COL1-SUM
    `Running sum of column 2: ` a . // Print the sum
;

// Check if column 3 is greater than 100
: CHECK-COLUMN-3   
    a 3 = ( a 100 > ( `Column 3 greater than 100` . ) /E ) 
;

// Print formatted output
: PRINT-FORMATTED  
    `Formatted output: ` a .        
;

// Print the entire input line
: PRINT-LINE 
    `Entire line: ` .               // Print entire input line
;

// Count number of fields
: COUNT-FIELDS 
    SPLIT
    b .                              // Print number of fields (NF)
;

// Main command function
: MAIN
    `Choose a command: ` . 
    `/1` PRINT-COLUMNS
    `/2` SUM-COLUMN-2
    `/3` CHECK-COLUMN-3
    `/4` PRINT-FORMATTED
    `/5` PRINT-LINE
    `/6` COUNT-FIELDS
;

// Start processing
MAIN
